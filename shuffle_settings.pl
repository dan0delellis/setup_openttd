#!/usr/bin/perl
use strict;
use warnings;
use lib qw (PerlMods/Cmd);
use DoCmd qw(do_cmd);
use MIME::Base64;
use Data::Dumper;
use Getopt::Long;

my $user = "openttd";
my @protected = qw(version_string version_number ini_version);

my $opts;
my @out;

my $defaults;
#The config file should be in ~ for the user executing the script
my $opts_file   = "./custom_options.cfg";
my $template    = "../openttd.cfg";
my $target_file = "openttd.cfg.shuffled";

GetOptions (
    "s|settings_file=s"     =>  \$opts_file,
    "t|template_config=s"   =>  \$template,
    "d|defaults!"           =>  \$defaults,
);
open (my $ro, "<", $opts_file) or die "Unable to open template file. Can't generate the config:$!\n";
#open (my $fh, ">", $target_file) or die "Unable to open target file. Can't generate the config:$!\n";

while (my $line=<$ro>) {
    my ($opt,$setting) = scan_line($line);
    if (defined $opt && defined $setting) {
        $opts->{$opt} = $setting;
    }
}
close ($ro);

#Read a base config file, hopefully generated by openttd.cfg
open(my $rt, "<", $template) or die "what the shti man";

while (my $line=<$rt>) {
    my ($k,$v) = scan_line($line);

    unless (defined $k) {
        #push @out, " ";
        next;
    }
    unless (defined $v) {
        #push @out, "$k = ";
        next;
    }


    if (exists $opts->{$k} && defined $opts->{$k}) {
        $v = $opts->{$k};
    }
    $line = "$k = $v";
    push @out, $line;
}
print Dumper @out;


#subfunctions
sub scan_line {
    my ($li) = @_;
    if ($li =~ m/(^#|^$)/) {
        return ($li);
    }
    my $val;
    chomp $li;
    if ($li =~ m/;/) {
        my @parts = split(/;/, $li);
        $li = shift @parts;
    }
    my @kv = split(/\s*=\s*/, $li);

    my $k = shift @kv;
    my $v = shift @kv;
    unless (defined $v) {
        return ($k);
    }
    if ($k =~m/town/) {
    }
    if ($v =~ m/^\s*<\s*(\S+)\s*>\s*$/) {
        $val = process_random($1);
    } else {
        $val = $v;
    }

    return ($k,$val);
}

sub process_random {
    my ($l) = @_;
    my @arr;

    #handle booleans
    if ($l =~ m/^bool(ean)?$/i) {
        $l = "true,false";
    }

    #evaluate number range
    if ($l =~ m/([0-9]+)\.\.([0-9]+)/) {
        @arr = ($1 .. $2);
    }

    #evaluate lists
    if ($l =~ m/^[a-zA-Z0-9,]+$/) {
        @arr = split(/,/, $l);
    }

    return $arr[int rand (@arr)];
}
